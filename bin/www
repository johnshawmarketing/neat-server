#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('neat-server:server');
var models = require('../models');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server after setting up database.
 * sync force true to drop database if exists
 */
var defaultTypes = [
  { name: 'Lighting' },
  { name: 'Garbage' },
  { name: 'Road Hazard' },
  { name: 'Housing' },
  { name: 'Graffiti' },
  { name: 'Driveway' }
];

var defaultAdmin = {
  name: 'X-Support',
  email: process.env.SUPPORT_EMAIL,
  privilege: 'A'
};

var server = http.createServer(app);

models.sequelize.sync({
  force: app.get('env') === 'development'
}).then(function() {

  return models.Type.count();

}).then(function(count) {
  if (count > 0) {
    return count;
  }
  // create default types no type in database
  return models.Type.bulkCreate(defaultTypes);
}).then(function(result) {
  // create default admin if not exist
  return models.User.findOrCreate({
    where: {
      email: defaultAdmin.email
    },
    defaults: defaultAdmin
  });
}).spread(function(user, created) {
  if (created) {
    // set password for default admin
    return user.update({ password: process.env.SUPPORT_PASS });
  }
  return user;
}).then(function(ready) {
  /**
  * Listen on provided port, on all network interfaces.
  */
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}).catch(function(error) {
  console.error(error);
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
